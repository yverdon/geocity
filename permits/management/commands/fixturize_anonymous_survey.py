from io import StringIO

from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.sites.models import Site
from django.core import management
from django.core.management.base import BaseCommand
from django.db import connection, transaction
from django.utils import timezone

from geomapshark import settings
from permits import admin, models
import re
import unicodedata
from .add_default_print_config import add_default_print_config
from constance import config
from sesame.utils import get_query_string
from constance import config


def strip_accents(text):
    """
    Strip accents from input String.

    :param text: The input string.
    :type text: String.

    :returns: The processed String.
    :rtype: String.
    """
    try:
        text = unicode(text, "utf-8")
    except (TypeError, NameError):  # unicode is a default on python 3
        pass
    text = unicodedata.normalize("NFD", text)
    text = text.encode("ascii", "ignore")
    text = text.decode("utf-8")
    return str(text)


def unaccent(text):
    """
    Convert input text to id.

    :param text: The input string.
    :type text: String.

    :returns: The processed String.
    :rtype: String.
    """
    text = strip_accents(text.lower())
    text = re.sub("[ ]+", "_", text)
    text = re.sub("[^0-9a-zA-Z_-]", "", text)
    return text


User = get_user_model()


def reset_db():
    """
    Reset database to a blank state by removing all the tables and recreating them.
    """
    with transaction.atomic():
        with connection.cursor() as cursor:

            if settings.CLEAR_PUBLIC_SCHEMA_ON_FIXTURIZE.lower() == "true":
                cursor.execute(
                    "select tablename from pg_tables where schemaname = 'geocity' or schemaname = 'public'"
                )
                tables = [
                    row[0]
                    for row in cursor.fetchall()
                    if row[0] not in {"spatial_ref_sys"}
                ]
            else:  # some user might don't want to clear public schema
                cursor.execute(
                    "select tablename from pg_tables where schemaname = 'geocity'"
                )
                tables = [row[0] for row in cursor.fetchall()]
            # Can't use query parameters here as they'll add single quotes which are not
            # supported by postgres
            for table in tables:
                cursor.execute('drop table "' + table + '" cascade')

    # Call migrate so that post-migrate hooks such as generating a default Site object
    # are run.

    # sprint-7/yc-357: This was removed from the atomic transaction because
    # Addfield and AlterField operations are performed, thus generating a:
    # django.db.utils.OperationalError: cannot ALTER TABLE "permits_permitdepartment"
    # because it has pending trigger events.
    management.call_command("migrate", "--noinput", stdout=StringIO())


class Command(BaseCommand):
    def handle(self, *args, **options):
        self.stdout.write("Resetting database...")
        reset_db()
        with transaction.atomic():
            self.stdout.write("Setup base Site object...")
            self.setup_site()
            self.stdout.write("Creating users...")
            self.create_users()
            self.stdout.write("Creating works types and objs...")
            self.create_works_types()
            self.stdout.write("Creating dummy geometric entities...")
            self.create_geom_layer_entity()
            self.stdout.write("Creating template customizations...")
            self.create_template_customization()
            self.stdout.write("Configurating template customizations...")
            self.setup_homepage()
            self.stdout.write("Creating default print templates...")
            add_default_print_config()
            self.stdout.write("Configure glocal settings...")
            self.setup_global_config()
            self.stdout.write("Fixturize succeed!")

    def setup_site(self):
        # Default site generated by django's post migration hook
        site = Site.objects.get()
        site.domain = settings.SITE_DOMAIN
        site.name = settings.SITE_DOMAIN
        site.save()

    def create_users(self):

        administrative_entity_yverdon = models.PermitAdministrativeEntity.objects.create(
            name="Espaces publics yverdonnois Ã  5 minutes",
            ofs_id=5938,
            link="https://mapnv.ch",
            archive_link="https://mapnv.ch",
            geom="SRID=2056;MultiPolygon (((2539055.65576984 1181361.17780091, 2539058.98654812 1181360.82772201, 2539066.82089691 1181357.97625224, 2539068.24187213 1181357.08832838, 2539074.95096751 1181350.26110331, 2539075.8139567 1181348.82484811, 2539078.52826394 1181340.94192751, 2539078.45911302 1181333.01801725, 2539075.39499707 1181324.82266687, 2539074.71971939 1181323.76269324, 2539067.89249433 1181317.05359785, 2539066.45623913 1181316.19060866, 2539058.57331853 1181313.47630143, 2539050.64940827 1181313.54545234, 2539042.45405789 1181316.60956829, 2539041.39408425 1181317.28484598, 2539034.68498887 1181324.11207104, 2539034.02831313 1181325.18366845, 2539031.10769244 1181333.43124684, 2539031.17684336 1181341.3551571, 2539034.02831313 1181349.1895059, 2539034.91623699 1181350.61048111, 2539041.74346205 1181357.3195765, 2539042.81505947 1181357.97625224, 2539051.06263785 1181360.89687292, 2539055.65576984 1181361.17780091)),((2539284.16734602 1182019.52545825, 2539286.11530815 1182019.44040838, 2539293.88342211 1182018.76078647, 2539301.58520532 1182017.54094385, 2539309.18313544 1182015.78682347, 2539316.64019614 1182013.50697122, 2539325.70815753 1182009.93500624, 2539330.98725234 1182007.41700717, 2539332.71676196 1182006.51668145, 2539341.11430327 1182001.5701516, 2539344.3471248 1181999.38958594, 2539349.04877091 1181995.91055083, 2539355.02222223 1181990.89823003, 2539357.87412674 1181988.23878604, 2539361.97364679 1181984.06708414, 2539364.58291313 1181981.16920029, 2539369.49021943 1181975.10918169, 2539372.88666963 1181970.34753413, 2539375.01048266 1181967.07714885, 2539379.80970183 1181958.59455769, 2539380.67970632 1181956.84959863, 2539383.10518897 1181951.5273627, 2539386.51835218 1181942.39844302, 2539388.66771354 1181934.90272916, 2539390.2889646 1181927.27534262, 2539391.37420678 1181919.55344325, 2539391.9181529 1181911.77465137, 2539391.9181529 1181903.97686447, 2539391.15348113 1181894.26078837, 2539389.93363851 1181886.55900517, 2539388.17951812 1181878.96107505, 2539385.89966587 1181871.50401435, 2539382.32770089 1181862.43605296, 2539379.80970183 1181857.15695815, 2539378.90937611 1181855.42744853, 2539373.96284625 1181847.02990722, 2539371.78228059 1181843.79708569, 2539368.30324549 1181839.09543958, 2539363.29092469 1181833.12198826, 2539361.97364679 1181831.68443169, 2539356.4597788 1181826.1705637, 2539353.56189494 1181823.56129736, 2539347.50187635 1181818.65399106, 2539342.74022879 1181815.25754086, 2539339.46984351 1181813.13372783, 2539330.98725234 1181808.33450866, 2539329.24229328 1181807.46450417, 2539323.92005736 1181805.03902152, 2539314.79113768 1181801.62585831, 2539309.18313544 1181799.96469237, 2539307.29542382 1181799.47649695, 2539299.66803727 1181797.85524589, 2539291.9461379 1181796.77000371, 2539284.16734602 1181796.22605759, 2539276.36955912 1181796.22605759, 2539266.65348303 1181796.99072936, 2539258.95169983 1181798.21057198, 2539251.3537697 1181799.96469237, 2539249.47486578 1181800.48575854, 2539243.89670901 1181802.24454461, 2539234.82874762 1181805.8165096, 2539229.5496528 1181808.33450866, 2539227.82014318 1181809.23483438, 2539219.42260188 1181814.18136424, 2539216.18978034 1181816.3619299, 2539211.48813424 1181819.840965, 2539205.51468292 1181824.8532858, 2539204.07712635 1181826.1705637, 2539197.24598046 1181833.12198826, 2539195.95399201 1181834.58231555, 2539191.04668571 1181840.64233414, 2539187.65023552 1181845.4039817, 2539185.52642249 1181848.67436698, 2539180.72720332 1181857.15695815, 2539179.85719882 1181858.9019172, 2539177.43171617 1181864.22415313, 2539174.01855296 1181873.35307281, 2539172.35738702 1181878.96107505, 2539171.8691916 1181880.84878667, 2539170.24794054 1181888.47617321, 2539169.16269836 1181896.19807259, 2539168.56771196 1181905.92601424, 2539168.70380211 1181913.72261349, 2539169.38342402 1181921.49072746, 2539170.60326664 1181929.19251066, 2539172.35738702 1181936.79044079, 2539172.8784532 1181938.66934471, 2539174.63723927 1181944.24750148, 2539178.20920425 1181953.31546287, 2539180.72720332 1181958.59455769, 2539181.62752904 1181960.32406731, 2539186.57405889 1181968.72160861, 2539188.75462455 1181971.95443015, 2539192.23365966 1181976.65607625, 2539197.24598046 1181982.62952757, 2539199.90542444 1181985.48143209, 2539205.51468292 1181990.89823003, 2539206.9750102 1181992.19021848, 2539213.0350288 1181997.09752478, 2539217.79667636 1182000.49397497, 2539221.06706163 1182002.617788, 2539229.5496528 1182007.41700717, 2539231.29461186 1182008.28701167, 2539236.61684779 1182010.71249432, 2539245.74576747 1182014.12565752, 2539253.24148133 1182016.27501889, 2539260.86886787 1182017.89626995, 2539268.59076724 1182018.98151213, 2539278.31870889 1182019.57649853, 2539284.16734602 1182019.52545825)),((2540202.53733154 1181814.97318761, 2540208.4828271 1181814.50786273, 2540215.53073929 1181813.27213185, 2540223.5374169 1181810.91429612, 2540227.96523871 1181809.13625712, 2540232.25904778 1181807.05533609, 2540240.36261876 1181802.02636451, 2540241.32418805 1181801.32006447, 2540247.69213827 1181795.92418773, 2540250.21181547 1181793.38254824, 2540255.55222588 1181786.96801066, 2540256.93118328 1181785.020718, 2540261.7474955 1181776.78897733, 2540263.71593333 1181772.44245215, 2540264.99173688 1181769.09864746, 2540267.27999928 1181761.0718093, 2540268.57854541 1181752.82680756, 2540268.86822998 1181744.48520348, 2540268.30991723 1181737.35159402, 2540266.72599614 1181729.1566279, 2540264.16052679 1181721.21404377, 2540263.25219091 1181719.00759908, 2540260.07582995 1181712.59582646, 2540254.83760763 1181704.62591776, 2540248.5466942 1181697.45773627, 2540246.8232606 1181695.80750936, 2540239.38893576 1181689.83346283, 2540238.40343239 1181689.16096126, 2540231.1993026 1181684.94589427, 2540222.41200934 1181681.23888808, 2540214.36561516 1181679.02037135, 2540207.29731724 1181677.90715013, 2540198.95854126 1181677.54508533, 2540190.63735516 1181678.19634389, 2540182.45644343 1181679.85132391, 2540176.76576541 1181681.63503589, 2540174.53642236 1181682.48562497, 2540166.99406182 1181686.06040792, 2540160.91424655 1181689.83346283, 2540158.97899425 1181691.22926754, 2540150.91651136 1181698.30503451, 2540144.75095642 1181705.58132135, 2540143.37199902 1181707.52861401, 2540139.65184881 1181713.64094412, 2540135.71734496 1181722.32875727, 2540135.31144542 1181723.45068455, 2540133.29011348 1181730.31467131, 2540131.84866275 1181738.53589357, 2540131.41424498 1181745.67811859, 2540131.84866275 1181754.01343844, 2540133.29011348 1181762.2346607, 2540135.71734496 1181770.22057474, 2540139.094571 1181777.85343921, 2540144.05302779 1181786.00034807, 2540150.91651136 1181794.24429749, 2540151.75648811 1181795.09159574, 2540159.94056355 1181802.02636451, 2540168.04413453 1181807.05533609, 2540173.43315847 1181809.60952199, 2540175.6474029 1181810.49867542, 2540183.61195191 1181812.99511985, 2540191.82035521 1181814.50786273, 2540200.15159115 1181815.01460074, 2540202.53733154 1181814.97318761)),((2540273.73922388 1181393.68607866, 2540280.61531494 1181392.7808241, 2540288.33688275 1181390.04647353, 2540290.017033 1181389.17184267, 2540296.68579121 1181384.41506366, 2540299.78205006 1181381.26428777, 2540304.4217187 1181374.513528, 2540305.26689369 1181372.81836923, 2540307.86606786 1181365.05025646, 2540308.65118022 1181356.89655294, 2540307.58198598 1181348.77521646, 2540304.71329193 1181341.10254567, 2540304.12041467 1181339.98750572, 2540299.36363567 1181333.31874752, 2540296.21285977 1181330.22248867, 2540288.90199305 1181325.2912468, 2540287.76694124 1181324.73764504, 2540279.99882846 1181322.13847086, 2540271.84512494 1181321.35335851, 2540263.72378846 1181322.42255274, 2540256.05111768 1181325.2912468, 2540255.49101073 1181325.58282002, 2540248.26731952 1181330.64090306, 2540245.17106067 1181333.79167895, 2540240.2398188 1181341.10254567, 2540239.9580652 1181341.66765598, 2540237.22371463 1181349.38922379, 2540236.29642011 1181357.52798336, 2540237.22371463 1181365.66674293, 2540239.9580652 1181373.38831075, 2540240.53139203 1181374.513528, 2540245.58947506 1181381.7372192, 2540248.74025096 1181384.83347805, 2540255.49101073 1181389.4731467, 2540256.61622798 1181390.04647353, 2540264.33779579 1181392.7808241, 2540272.47655537 1181393.70811862, 2540273.73922388 1181393.68607866)),((2539180.87999572 1180855.52452315, 2539188.89909221 1180854.47468845, 2539196.48003599 1180851.65735763, 2539204.64406671 1180845.98180734, 2539207.25325984 1180843.30378319, 2539212.44246916 1180835.55579096, 2539215.33338392 1180827.34305494, 2539216.17410684 1180819.29934643, 2539215.193904 1180811.2714411, 2539212.44246916 1180803.6663331, 2539212.16088449 1180803.11011684, 2539206.8379827 1180795.45335555, 2539204.18270281 1180792.82101991, 2539196.48003599 1180787.56476643, 2539195.92139699 1180787.28801938, 2539188.29269753 1180784.60268774, 2539180.256588 1180783.69219057, 2539172.22047846 1180784.60268774, 2539164.03314 1180787.56476643, 2539163.47938837 1180787.85116752, 2539156.33047318 1180792.82101991, 2539153.25991615 1180795.91834087, 2539148.07070684 1180803.6663331, 2539147.79881827 1180804.22735276, 2539145.17979207 1180811.87906912, 2539144.33906915 1180819.92277763, 2539145.31927199 1180827.95068295, 2539148.35229151 1180836.11200722, 2539153.6751933 1180843.76876851, 2539156.7990449 1180846.81233036, 2539164.591779 1180851.93410467, 2539172.82929405 1180854.75363779, 2539180.87999572 1180855.52452315)),((2538721.3144021 1181182.38784052, 2538724.34371089 1181182.14942875, 2538732.17869011 1181179.67906929, 2538736.87735492 1181176.56909089, 2538740.22118184 1181173.16638789, 2538743.24868356 1181168.41416211, 2538745.58192753 1181160.53726248, 2538745.22358537 1181152.32987762, 2538741.98574998 1181144.31595382, 2538739.94489417 1181141.50695678, 2538734.06835788 1181136.39856172, 2538731.78996539 1181135.13562813, 2538723.91306576 1181132.80238417, 2538715.7056809 1181133.16072633, 2538707.6917571 1181136.39856172, 2538707.32542062 1181136.63194379, 2538699.774365 1181144.31595382, 2538699.54741192 1181144.68630758, 2538696.44993192 1181152.75551885, 2538696.23488295 1181160.96790761, 2538698.70524241 1181168.80288683, 2538700.00774707 1181171.05889108, 2538705.21792381 1181176.84537856, 2538708.06211087 1181178.83689978, 2538716.13132213 1181181.93437978, 2538721.3144021 1181182.38784052)),((2538262.47254436 1180100.62169863, 2538265.53878767 1180100.51462305, 2538273.17172112 1180099.77965516, 2538282.20327915 1180098.02409812, 2538286.63778741 1180096.79430014, 2538289.55573562 1180095.84620129, 2538298.08638242 1180092.39959626, 2538306.21002911 1180088.08017669, 2538313.83767132 1180082.93526706, 2538317.43913734 1180080.07053163, 2538321.99854641 1180075.96522127, 2538325.22404423 1180072.68293084, 2538329.24915667 1180068.05256865, 2538332.05060154 1180064.40165462, 2538337.06160687 1180056.68538308, 2538341.23859138 1180048.4875894, 2538344.53579116 1180039.89809031, 2538345.43282039 1180036.96403991, 2538346.58503822 1180032.50874411, 2538348.18270546 1180023.44792294, 2538348.78434836 1180015.80332506, 2538348.71743123 1180008.13538056, 2538347.98246333 1180000.50244711, 2538346.22690629 1179991.47088908, 2538344.99710831 1179987.03638082, 2538344.04900946 1179984.1184326, 2538340.60240443 1179975.58778581, 2538337.06160687 1179968.78597698, 2538336.28298487 1179967.46413912, 2538331.13807523 1179959.83649691, 2538328.2733398 1179956.23503088, 2538325.22404423 1179952.78842921, 2538320.88573901 1179948.450124, 2538316.25537682 1179944.42501156, 2538312.60446279 1179941.62356669, 2538304.88819125 1179936.61256136, 2538296.69039757 1179932.43557685, 2538288.10089848 1179929.13837707, 2538286.63778741 1179928.67705992, 2538280.71155228 1179927.08913001, 2538271.65073111 1179925.49146277, 2538264.00613323 1179924.88981987, 2538256.33818873 1179924.956737, 2538248.70525528 1179925.6917049, 2538239.67369725 1179927.44726194, 2538233.77607792 1179929.13837707, 2538232.32124078 1179929.62515877, 2538223.79059398 1179933.0717638, 2538216.98878515 1179936.61256136, 2538215.66694729 1179937.39118336, 2538208.03930508 1179942.536093, 2538204.43783906 1179945.40082843, 2538200.99123738 1179948.450124, 2538195.61649939 1179953.91949712, 2538192.62781973 1179957.4187914, 2538189.82637486 1179961.06970543, 2538184.81536953 1179968.78597698, 2538184.05993537 1179970.12120233, 2538180.63838502 1179976.98377066, 2538177.34118524 1179985.57326975, 2538176.87986809 1179987.03638082, 2538175.29193818 1179992.96261595, 2538173.69427094 1180002.02343712, 2538173.09262804 1180009.668035, 2538173.15954517 1180017.3359795, 2538173.89451307 1180024.96891295, 2538175.65007011 1180034.00047098, 2538177.34118524 1180039.89809031, 2538177.82796694 1180041.35292745, 2538181.27457197 1180049.88357425, 2538185.59399153 1180058.00722094, 2538190.73890117 1180065.63486315, 2538193.6036366 1180069.23632917, 2538197.70894696 1180073.79573824, 2538202.12230529 1180078.05766884, 2538205.62159958 1180081.0463485, 2538209.27251361 1180083.84779336, 2538216.98878515 1180088.8587987, 2538218.32401051 1180089.61423286, 2538225.18657883 1180093.03578321, 2538233.77607792 1180096.33298299, 2538236.71012832 1180097.23001222, 2538241.16542412 1180098.38223005, 2538250.22624529 1180099.97989729, 2538257.87084317 1180100.58154019, 2538262.47254436 1180100.62169863)),((2539156.56722123 1182454.92081922, 2539163.506154 1182454.55716516, 2539172.11643326 1182453.42360039, 2539180.59515114 1182451.54391389, 2539188.87777946 1182448.93241121, 2539195.32027511 1182446.32947401, 2539201.56550544 1182443.28347165, 2539204.60459632 1182441.59887607, 2539211.92909429 1182436.93265624, 2539214.74023169 1182434.89024537, 2539220.14019574 1182430.5174407, 2539223.98274115 1182426.99639655, 2539227.63574328 1182423.27907458, 2539231.0891895 1182419.3756637, 2539235.3670858 1182413.90020613, 2539237.36012449 1182411.0538519, 2539241.89780352 1182403.64903272, 2539243.52910308 1182400.58100446, 2539246.46564722 1182394.28356524, 2539248.95575093 1182387.79662329, 2539251.42230406 1182379.46967945, 2539253.15373025 1182370.95944787, 2539254.13685228 1182362.33069656, 2539254.37934987 1182355.38647398, 2539254.00053394 1182346.71016275, 2539253.15373025 1182339.81350009, 2539251.42230406 1182331.30326852, 2539250.98728267 1182329.62116561, 2539248.95575093 1182322.97632468, 2539245.77284279 1182314.89604164, 2539242.72684044 1182308.65081131, 2539241.89780352 1182307.12391525, 2539237.36012449 1182299.71909607, 2539234.33361415 1182295.47608506, 2539231.0891895 1182291.39728427, 2539226.43976533 1182286.2335756, 2539223.98274115 1182283.77655142, 2539218.81903249 1182279.12712725, 2539213.34357492 1182274.84923095, 2539210.49722068 1182272.85619226, 2539203.0924015 1182268.31851323, 2539201.56550544 1182267.48947631, 2539193.72693402 1182263.75066953, 2539187.23999207 1182261.26056582, 2539182.26940568 1182259.69334595, 2539178.91304823 1182258.79401269, 2539170.40281666 1182257.0625865, 2539161.77406535 1182256.07946447, 2539154.82984277 1182255.83696688, 2539146.15353153 1182256.21578281, 2539139.25686888 1182257.0625865, 2539130.7466373 1182258.79401269, 2539125.72438367 1182260.18680688, 2539122.41969346 1182261.26056582, 2539114.33941043 1182264.44347396, 2539106.56728403 1182268.31851323, 2539099.16246485 1182272.85619226, 2539094.91945384 1182275.8827026, 2539090.84065305 1182279.12712725, 2539084.43771123 1182284.99434244, 2539083.2199202 1182286.2335756, 2539077.46534535 1182292.73793924, 2539074.29259974 1182296.87274183, 2539071.3406011 1182301.1679265, 2539066.9328451 1182308.65081131, 2539063.19403832 1182316.48938273, 2539060.15263534 1182324.62398451, 2539059.13671474 1182327.94691107, 2539057.83178308 1182332.9927074, 2539056.24914462 1182341.53186038, 2539055.52283326 1182348.4422514, 2539055.29549753 1182357.12385244, 2539055.65915159 1182364.06278522, 2539056.79271636 1182372.67306448, 2539058.67240286 1182381.15178235, 2539059.63017567 1182384.49193308, 2539061.28390554 1182389.43441067, 2539063.88684274 1182395.87690632, 2539067.76188202 1182403.64903272, 2539068.61744068 1182405.16122754, 2539073.28366051 1182412.48572551, 2539075.32607138 1182415.29686291, 2539079.69887605 1182420.69682695, 2539084.43771123 1182425.77860552, 2539086.93724218 1182428.1923745, 2539092.18130803 1182432.7509714, 2539096.31611062 1182435.92371701, 2539100.61129528 1182438.87571565, 2539108.09418009 1182443.28347165, 2539109.63531229 1182444.08573429, 2539115.93275151 1182447.02227843, 2539124.06735329 1182450.06368141, 2539130.7466373 1182451.97893528, 2539132.43607618 1182452.38453367, 2539140.97522916 1182453.96717213, 2539147.88562019 1182454.69348349, 2539156.56722123 1182454.92081922)),((2538633.89481803 1181524.44384608, 2538635.68031925 1181524.36588941, 2538638.04999104 1181524.11682687, 2538643.27972381 1181522.95742303, 2538651.38887248 1181519.26187107, 2538655.69489907 1181516.07557901, 2538659.44946542 1181512.25490452, 2538662.56012167 1181507.8939253, 2538666.11358662 1181499.72151541, 2538667.18154246 1181494.47234478, 2538667.38921059 1181492.09868716, 2538667.10377566 1181485.56115244, 2538666.80880221 1181483.7984606, 2538664.2376279 1181475.88519974, 2538659.0625278 1181467.91624442, 2538650.8808741 1181461.05102181, 2538649.32537244 1181460.17096132, 2538642.70846421 1181457.49755686, 2538635.08563595 1181456.22193289, 2538626.7854094 1181456.80234127, 2538618.87214853 1181459.37351559, 2538616.74912537 1181460.45524992, 2538610.90319321 1181464.54861568, 2538607.14862685 1181468.36929017, 2538603.15791012 1181474.28577104, 2538602.1133924 1181476.42734973, 2538599.68071513 1181484.38427854, 2538599.24525408 1181492.69337046, 2538600.65372046 1181500.29277501, 2538603.44219872 1181506.86201812, 2538604.34927242 1181508.40192369, 2538611.35623896 1181516.46251663, 2538619.41429852 1181521.49775109, 2538627.37122734 1181523.93042835, 2538629.13879871 1181524.19459367, 2538633.89481803 1181524.44384608)))",
        )

        administrative_entity_yverdon.tags.set("ep5")

        user = User.objects.create_user(
            email=f"yverdon-squad+admin@liip.ch",
            first_name="SuperAdmin",
            last_name="Demo",
            username="admin",
            password="demo",
            is_staff=True,
            is_superuser=True,
        )

        models.PermitAuthor.objects.create(
            user=user,
            address="Rue du test",
            zipcode=1234,
            city="Yverdon",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
        )

        self.stdout.write("admin / demo")

        user = User.objects.create_user(
            username="user",
            password="demo",
            email=f"yverdon-squad+user@liip.ch",
            first_name="User",
            last_name="Demo",
        )
        models.PermitAuthor.objects.create(
            user=user,
            address="Rue du Port",
            zipcode=1234,
            city="Lausanne",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
        )

        self.stdout.write("user / demo")

        anonymous_user = User.objects.create_user(
            username="anonymous",
            password="anonymous",
            email=f"yverdon-squad+user@liip.ch",
            first_name="anonymous",
            last_name="anonymous",
        )

        sesame_token = get_query_string(anonymous_user)
        self.stdout.write(f"anonymous user token: {sesame_token}")

        models.PermitAuthor.objects.create(
            user=anonymous_user,
            address="Rue du Port",
            zipcode=1234,
            city="Lausanne",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
            is_anonymous_user=True,
        )
        # TODO: check this
        # user.set_unusable_password()
        self.stdout.write(
            f"anonymous user has usable password: {user.has_usable_password()}"
        )

        self.stdout.write("anonymous / anonymous")

        permit_request_ct = ContentType.objects.get_for_model(models.PermitRequest)
        secretariat_permissions = Permission.objects.filter(
            codename__in=["amend_permit_request", "classify_permit_request"],
            content_type=permit_request_ct,
        )
        user = self.create_user(
            "pilot",
            "pilot",
            administrative_entity_yverdon,
            email="yverdon-squad+pilot@liip.ch",
        )
        user.user_permissions.set(secretariat_permissions)
        self.stdout.write("pilot / demo")

        secretary_groups = Group.objects.filter(name__in=["pilot", "pilot-2"])
        department = models.PermitDepartment.objects.filter(
            group__in=secretary_groups
        ).update(is_backoffice=True)

        user = self.create_user(
            "validator",
            "validator",
            administrative_entity_yverdon,
            is_default_validator=True,
            email="yverdon-squad+validator@liip.ch",
        )
        Group.objects.get(name="validator").permissions.add(
            Permission.objects.get(
                codename="validate_permit_request", content_type=permit_request_ct
            )
        )

        validator_group = Group.objects.get(name="validator")
        departement = models.PermitDepartment.objects.get(group=validator_group)
        departement.is_validator = True
        departement.save()

        self.stdout.write("validator / demo")

        user = self.create_user(
            "validator-2",
            "validator-2",
            administrative_entity_yverdon,
            email="yverdon-squad+validator-2@liip.ch",
        )
        Group.objects.get(name="validator-2").permissions.add(
            Permission.objects.get(
                codename="validate_permit_request", content_type=permit_request_ct
            )
        )
        self.stdout.write("validator-2 / demo")

        user = self.create_user(
            "integrator",
            "integrator",
            administrative_entity_yverdon,
            is_default_validator=True,
            is_integrator_admin=True,
            is_staff=True,
            email="yverdon-squad+integrator@liip.ch",
        )

        permits_permissions = Permission.objects.filter(
            content_type__app_label="permits",
            content_type__model__in=admin.INTEGRATOR_PERMITS_MODELS_PERMISSIONS,
        )

        other_permissions = Permission.objects.filter(
            codename__in=admin.OTHER_PERMISSIONS_CODENAMES
        )
        # set the required permissions for the integrator group
        Group.objects.get(name="integrator").permissions.set(
            permits_permissions.union(other_permissions)
        )
        self.stdout.write("integrator / demo")

        # Insert status choices from PermitRequest and insert status for adminsitrative_entity
        for status_value in models.PermitRequest.STATUS_CHOICES:
            for entity in [
                administrative_entity_yverdon,
            ]:
                models.PermitWorkflowStatus.objects.get_or_create(
                    status=status_value[0], administrative_entity=entity
                )

    def create_user(
        self,
        username,
        group_name,
        administrative_entity,
        is_default_validator=False,
        is_integrator_admin=False,
        is_staff=False,
        email="yverdon-squad+user@liip.ch",
    ):

        group, created = Group.objects.get_or_create(name=group_name)
        user = User.objects.create_user(
            email=email,
            first_name="User First",
            last_name="User Last",
            username=username,
            password="demo",
            is_staff=is_staff,
        )
        user.groups.set([group])
        models.PermitAuthor.objects.create(
            user=user, address="Rue du Lac", zipcode=1400, city="Yverdon",
        )
        models.PermitDepartment.objects.create(
            group=group,
            is_validator=False,
            is_integrator_admin=is_integrator_admin,
            is_backoffice=False,
            administrative_entity=administrative_entity,
            is_default_validator=is_default_validator,
        )

        return user

    def create_works_types(self):
        properties = {
            "title": models.WorksObjectProperty.objects.create(
                name="Texte permettant de sÃ©parer visuellement les champs",
                input_type="title",
                help_text="Ce texte permet d'expliquer en dÃ©tail Ã  l'utilisateur les pourquoi et le comment des informations Ã  fournir",
                is_mandatory=False,
                order=2,
            ),
            "comment": models.WorksObjectProperty.objects.create(
                name="Commentaire", input_type="text", is_mandatory=False, order=0
            ),
            "width": models.WorksObjectProperty.objects.create(
                name="Largeur [m]",
                input_type="number",
                placeholder="3",
                help_text="Largeur en mÃ¨tres",
                is_mandatory=False,
                order=1,
            ),
            "height": models.WorksObjectProperty.objects.create(
                name="Hauteur [m]",
                input_type="number",
                placeholder="2",
                help_text="Longueur en mÃ¨tres",
                is_mandatory=False,
                order=3,
            ),
            "plan": models.WorksObjectProperty.objects.create(
                name="Plan de situation",
                input_type="file",
                help_text="Plan complÃ©mentaire dÃ©taillant votre projet",
                is_mandatory=False,
                order=4,
            ),
            "adresse": models.WorksObjectProperty.objects.create(
                name="Adresse",
                input_type="address",
                placeholder="place pestalozzi 2, 1400 Yverdon-les-Bains",
                is_mandatory=False,
                order=5,
            ),
            "date": models.WorksObjectProperty.objects.create(
                name="Date", input_type="date", is_mandatory=False, order=6,
            ),
            "checkbox": models.WorksObjectProperty.objects.create(
                name="Impact sur la chaussÃ©e",
                input_type="checkbox",
                is_mandatory=False,
                order=7,
            ),
            "list_single": models.WorksObjectProperty.objects.create(
                name="Ã moins de 3m d'un arbre",
                input_type="list_single",
                is_mandatory=False,
                choices="oui\nnon",
                order=8,
            ),
            "list_multiple": models.WorksObjectProperty.objects.create(
                name="Ã moins de 3m d'un arbre",
                input_type="list_multiple",
                is_mandatory=False,
                choices="DÃ©viation trafic\nHoraire prolongÃ©\nSon>90dB",
                order=9,
            ),
        }
        works_types = [
            (
                "Espaces publics Ã  5 minutes",
                [
                    (
                        "Espaces publics Ã  5 minutes",
                        properties["comment"],
                        properties["date"],
                    ),
                ],
            ),
        ]
        administrative_entity_yverdon = models.PermitAdministrativeEntity.objects.get(
            name="Espaces publics yverdonnois Ã  5 minutes",
        )
        administrative_entity_yverdon.tags.set("ep5")

        for works_type, objs in works_types:
            works_type_obj = models.WorksType.objects.create(name=works_type)
            works_type_obj.tags.set(unaccent(works_type))

            for works_obj, *props in objs:
                works_obj_obj, created = models.WorksObject.objects.get_or_create(
                    name=works_obj,
                    wms_layers="https://mapnv.ch/mapserv_proxy?ogcserver=QGIS-server-geocity&SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&CRS=EPSG:2056&LAYERS=espaces_publics,masque_espaces_publics&FORMAT=image/png"
                )
                works_object_type = models.WorksObjectType.objects.create(
                    works_type=works_type_obj,
                    works_object=works_obj_obj,
                    is_public=True,
                    notify_services=True,
                    services_to_notify=f"yverdon-squad+admin@liip.ch",
                )
                works_object_type.administrative_entities.add(
                    administrative_entity_yverdon
                )
                for prop in props:
                    prop.works_object_types.add(works_object_type)

        # Configure specific WOT in order to illustrate full potential of Geocity

        # No geom nor time
        for wot in models.WorksObjectType.objects.filter(
            works_type__name="Espaces publics Ã  5 minutes"
        ):
            wot.has_geometry_point = True
            wot.has_geometry_line = False
            wot.has_geometry_polygon = False
            wot.needs_date = False
            wot.save()

    def create_geom_layer_entity(self):

        models.GeomLayer.objects.create(
            layer_name="Parcelle",
            description="DÃ©mo parcelle",
            source_id="1234",
            source_subid="9876",
            external_link="https://www.osm.org",
            geom="SRID=2056;MultiPolygon(((2526831.16912443 1159820.00193672, 2516148.68477727 1198947.70623155, 2551053.08130695 1201183.5750484, 2560741.84617995 1166651.82332153, 2526831.16912443 1159820.00193672)))",
        )

        models.GeomLayer.objects.create(
            layer_name="ArchÃ©ologie",
            description="DÃ©mo archÃ©ologie",
            source_id="1234",
            source_subid="9876",
            external_link="https://www.osm.org",
            geom="SRID=2056;MultiPolygon(((2526831.16912443 1159820.00193672, 2516148.68477727 1198947.70623155, 2551053.08130695 1201183.5750484, 2560741.84617995 1166651.82332153, 2526831.16912443 1159820.00193672)))",
        )

    def create_template_customization(self):
        models.TemplateCustomization.objects.create(
            templatename="geocity",
            application_title="Geocity",
            application_subtitle="Demandes en lignes concenrnant le territoire communal",
            application_description="Demandes en ligne concernant le <b>domaine public</b>",
        )

        models.TemplateCustomization.objects.create(
            templatename="city",
            application_title="City Admin",
            application_subtitle="Demandes en lignes",
            application_description="Demandes concernant l' <i>administration</i>",
        )

    def setup_homepage(self):
        config.APPLICATION_TITLE = "Participation citoyenne"
        config.APPLICATION_SUBTITLE = "Yverdon-les-Bains"
        config.APPLICATION_DESCRIPTION = """<p><b>Essayez l'application Ã  l'aide des diffÃ©rents comptes et rÃ´les (utilisateur / mot de passe):</b></p>
        <p>Utilisateur standard: user / demo</p>
        <p>Pilote (secrÃ©atariat): pilot / demo</p>
        <p>Validateur: validator / demo</p>
        <p>IntÃ©grateur 2: integrator / demo</p>
        <p>Utilisateur: admin / demo</p>
        <p>Utilisateur anonyme: consulter le lien dans l'admin</p>
        <p>Consultez les emails gÃ©nÃ©rÃ©s par l'application:</p>
        => <a href="https://mailhog.geocity.ch" target="_blank">BoÃ®te mail de demo<a/>
        """

    def setup_global_config(self):
        # TODO: adapt texts for surveys
        # "PROPERTIES_STEP": ("Renseignez les caractÃ©ristiques des objets", "", str),
        # "GEO_TIME_STEP": ("Renseignez le planning et la localisation", "", str),
        # "TIME_STEP": ("Renseignez le planning", "", str),
        # "GEO_STEP": ("Renseignez la localisation", "", str),
        # "APPENDICES_STEP": ("Ajouter des documents", "", str),
        # "ACTORS_STEP": ("Renseignez les contacts", "", str),
        # "SUBMIT_STEP": ("RÃ©sumÃ© et envoi", "", str),
        config.ENABLE_GEOCALENDAR = False
        config.LOCATION_STEP = "SÃ©lectionnez la dÃ©marche / le sondage"
        config.PROPERTIES_STEP = "Renseignez les informations"
        config.GEO_STEP = "Choisissez les espaces que vous utilisez le plus frÃ©quemment"

        return
