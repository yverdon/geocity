from io import StringIO

from django.contrib.auth import get_user_model
from django.contrib.auth.models import Group, Permission
from django.contrib.contenttypes.models import ContentType
from django.contrib.sites.models import Site
from django.core import management
from django.core.management.base import BaseCommand
from django.db import connection, transaction
from django.utils import timezone

from geomapshark import settings
from permits import admin, models
import re
import unicodedata
from .add_default_print_config import add_default_print_config
from constance import config
from sesame.utils import get_query_string
from constance import config


def strip_accents(text):
    """
    Strip accents from input String.

    :param text: The input string.
    :type text: String.

    :returns: The processed String.
    :rtype: String.
    """
    try:
        text = unicode(text, "utf-8")
    except (TypeError, NameError):  # unicode is a default on python 3
        pass
    text = unicodedata.normalize("NFD", text)
    text = text.encode("ascii", "ignore")
    text = text.decode("utf-8")
    return str(text)


def unaccent(text):
    """
    Convert input text to id.

    :param text: The input string.
    :type text: String.

    :returns: The processed String.
    :rtype: String.
    """
    text = strip_accents(text.lower())
    text = re.sub("[ ]+", "_", text)
    text = re.sub("[^0-9a-zA-Z_-]", "", text)
    return text


User = get_user_model()


def reset_db():
    """
    Reset database to a blank state by removing all the tables and recreating them.
    """
    with transaction.atomic():
        with connection.cursor() as cursor:

            if settings.CLEAR_PUBLIC_SCHEMA_ON_FIXTURIZE.lower() == "true":
                cursor.execute(
                    "select tablename from pg_tables where schemaname = 'geocity' or schemaname = 'public'"
                )
                tables = [
                    row[0]
                    for row in cursor.fetchall()
                    if row[0] not in {"spatial_ref_sys"}
                ]
            else:  # some user might don't want to clear public schema
                cursor.execute(
                    "select tablename from pg_tables where schemaname = 'geocity'"
                )
                tables = [row[0] for row in cursor.fetchall()]
            # Can't use query parameters here as they'll add single quotes which are not
            # supported by postgres
            for table in tables:
                cursor.execute('drop table "' + table + '" cascade')

    # Call migrate so that post-migrate hooks such as generating a default Site object
    # are run.

    # sprint-7/yc-357: This was removed from the atomic transaction because
    # Addfield and AlterField operations are performed, thus generating a:
    # django.db.utils.OperationalError: cannot ALTER TABLE "permits_permitdepartment"
    # because it has pending trigger events.
    management.call_command("migrate", "--noinput", stdout=StringIO())


class Command(BaseCommand):
    def handle(self, *args, **options):
        self.stdout.write("Resetting database...")
        reset_db()
        with transaction.atomic():
            self.stdout.write("Setup base Site object...")
            self.setup_site()
            self.stdout.write("Creating users...")
            self.create_users()
            self.stdout.write("Creating works types and objs...")
            self.create_works_types()
            self.stdout.write("Creating dummy geometric entities...")
            self.create_geom_layer_entity()
            self.stdout.write("Creating template customizations...")
            self.create_template_customization()
            self.stdout.write("Configurating template customizations...")
            self.setup_homepage()
            self.stdout.write("Creating default print templates...")
            add_default_print_config()
            self.stdout.write("Configure glocal settings...")
            self.setup_global_config()
            self.stdout.write("Fixturize succeed!")

    def setup_site(self):
        # Default site generated by django's post migration hook
        site = Site.objects.get()
        site.domain = settings.SITE_DOMAIN
        site.name = settings.SITE_DOMAIN
        site.save()

    def create_users(self):

        administrative_entity_yverdon = models.PermitAdministrativeEntity.objects.create(
            name="Espaces publics yverdonnois Ã  5 minutes",
            ofs_id=5938,
            link="https://mapnv.ch",
            archive_link="https://mapnv.ch",
            geom="SRID=2056;MultiPolygon (((2538391 1176432, 2538027 1178201, 2538485 1178804, 2537777 1179199, 2536748 1178450, 2536123 1179647, 2537382 1180593, 2537143 1181623, 2538651 1183257, 2540368 1183236, 2541252 1181093, 2541460 1180458, 2540160 1179543, 2540097 1178877, 2538391 1176432)))",
        )

        administrative_entity_yverdon.tags.set("ep5")

        user = User.objects.create_user(
            email=f"yverdon-squad+admin@liip.ch",
            first_name="SuperAdmin",
            last_name="Demo",
            username="admin",
            password="demo",
            is_staff=True,
            is_superuser=True,
        )

        models.PermitAuthor.objects.create(
            user=user,
            address="Rue du test",
            zipcode=1234,
            city="Yverdon",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
        )

        self.stdout.write("admin / demo")

        user = User.objects.create_user(
            username="user",
            password="demo",
            email=f"yverdon-squad+user@liip.ch",
            first_name="User",
            last_name="Demo",
        )
        models.PermitAuthor.objects.create(
            user=user,
            address="Rue du Port",
            zipcode=1234,
            city="Lausanne",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
        )

        self.stdout.write("user / demo")

        anonymous_user = User.objects.create_user(
            username="anonymous",
            password="anonymous",
            email=f"yverdon-squad+user@liip.ch",
            first_name="anonymous",
            last_name="anonymous",
        )

        sesame_token = get_query_string(anonymous_user)
        self.stdout.write(f"anonymous user token: {sesame_token}")

        models.PermitAuthor.objects.create(
            user=anonymous_user,
            address="Rue du Port",
            zipcode=1234,
            city="Lausanne",
            phone_first="000 00 00 00",
            phone_second="000 00 00 00",
            is_anonymous_user=True,
        )
        # TODO: check this
        # user.set_unusable_password()
        self.stdout.write(
            f"anonymous user has usable password: {user.has_usable_password()}"
        )

        self.stdout.write("anonymous / anonymous")

        permit_request_ct = ContentType.objects.get_for_model(models.PermitRequest)
        secretariat_permissions = Permission.objects.filter(
            codename__in=["amend_permit_request", "classify_permit_request"],
            content_type=permit_request_ct,
        )
        user = self.create_user(
            "pilot",
            "pilot",
            administrative_entity_yverdon,
            email="yverdon-squad+pilot@liip.ch",
        )
        user.user_permissions.set(secretariat_permissions)
        self.stdout.write("pilot / demo")

        secretary_groups = Group.objects.filter(name__in=["pilot", "pilot-2"])
        department = models.PermitDepartment.objects.filter(
            group__in=secretary_groups
        ).update(is_backoffice=True)

        user = self.create_user(
            "validator",
            "validator",
            administrative_entity_yverdon,
            is_default_validator=True,
            email="yverdon-squad+validator@liip.ch",
        )
        Group.objects.get(name="validator").permissions.add(
            Permission.objects.get(
                codename="validate_permit_request", content_type=permit_request_ct
            )
        )

        validator_group = Group.objects.get(name="validator")
        departement = models.PermitDepartment.objects.get(group=validator_group)
        departement.is_validator = True
        departement.save()

        self.stdout.write("validator / demo")

        user = self.create_user(
            "validator-2",
            "validator-2",
            administrative_entity_yverdon,
            email="yverdon-squad+validator-2@liip.ch",
        )
        Group.objects.get(name="validator-2").permissions.add(
            Permission.objects.get(
                codename="validate_permit_request", content_type=permit_request_ct
            )
        )
        self.stdout.write("validator-2 / demo")

        user = self.create_user(
            "integrator",
            "integrator",
            administrative_entity_yverdon,
            is_default_validator=True,
            is_integrator_admin=True,
            is_staff=True,
            email="yverdon-squad+integrator@liip.ch",
        )

        permits_permissions = Permission.objects.filter(
            content_type__app_label="permits",
            content_type__model__in=admin.INTEGRATOR_PERMITS_MODELS_PERMISSIONS,
        )

        other_permissions = Permission.objects.filter(
            codename__in=admin.OTHER_PERMISSIONS_CODENAMES
        )
        # set the required permissions for the integrator group
        Group.objects.get(name="integrator").permissions.set(
            permits_permissions.union(other_permissions)
        )
        self.stdout.write("integrator / demo")

        # Insert status choices from PermitRequest and insert status for adminsitrative_entity
        for status_value in models.PermitRequest.STATUS_CHOICES:
            for entity in [
                administrative_entity_yverdon,
            ]:
                models.PermitWorkflowStatus.objects.get_or_create(
                    status=status_value[0], administrative_entity=entity
                )

    def create_user(
        self,
        username,
        group_name,
        administrative_entity,
        is_default_validator=False,
        is_integrator_admin=False,
        is_staff=False,
        email="yverdon-squad+user@liip.ch",
    ):

        group, created = Group.objects.get_or_create(name=group_name)
        user = User.objects.create_user(
            email=email,
            first_name="User First",
            last_name="User Last",
            username=username,
            password="demo",
            is_staff=is_staff,
        )
        user.groups.set([group])
        models.PermitAuthor.objects.create(
            user=user, address="Rue du Lac", zipcode=1400, city="Yverdon",
        )
        models.PermitDepartment.objects.create(
            group=group,
            is_validator=False,
            is_integrator_admin=is_integrator_admin,
            is_backoffice=False,
            administrative_entity=administrative_entity,
            is_default_validator=is_default_validator,
        )

        return user

    def create_works_types(self):
        properties = {
            "title": models.WorksObjectProperty.objects.create(
                name="Texte permettant de sÃ©parer visuellement les champs",
                input_type="title",
                help_text="Ce texte permet d'expliquer en dÃ©tail Ã  l'utilisateur les pourquoi et le comment des informations Ã  fournir",
                is_mandatory=False,
                order=2,
            ),
            "comment": models.WorksObjectProperty.objects.create(
                name="Commentaire", input_type="text", is_mandatory=False, order=0
            ),
            "width": models.WorksObjectProperty.objects.create(
                name="Largeur [m]",
                input_type="number",
                placeholder="3",
                help_text="Largeur en mÃ¨tres",
                is_mandatory=False,
                order=1,
            ),
            "height": models.WorksObjectProperty.objects.create(
                name="Hauteur [m]",
                input_type="number",
                placeholder="2",
                help_text="Longueur en mÃ¨tres",
                is_mandatory=False,
                order=3,
            ),
            "plan": models.WorksObjectProperty.objects.create(
                name="Plan de situation",
                input_type="file",
                help_text="Plan complÃ©mentaire dÃ©taillant votre projet",
                is_mandatory=False,
                order=4,
            ),
            "adresse": models.WorksObjectProperty.objects.create(
                name="Adresse",
                input_type="address",
                placeholder="place pestalozzi 2, 1400 Yverdon-les-Bains",
                is_mandatory=False,
                order=5,
            ),
            "date": models.WorksObjectProperty.objects.create(
                name="Date", input_type="date", is_mandatory=False, order=6,
            ),
            "checkbox": models.WorksObjectProperty.objects.create(
                name="Impact sur la chaussÃ©e",
                input_type="checkbox",
                is_mandatory=False,
                order=7,
            ),
            "list_single": models.WorksObjectProperty.objects.create(
                name="Ã moins de 3m d'un arbre",
                input_type="list_single",
                is_mandatory=False,
                choices="oui\nnon",
                order=8,
            ),
            "list_multiple": models.WorksObjectProperty.objects.create(
                name="Ã moins de 3m d'un arbre",
                input_type="list_multiple",
                is_mandatory=False,
                choices="DÃ©viation trafic\nHoraire prolongÃ©\nSon>90dB",
                order=9,
            ),
        }
        works_types = [
            (
                "Espaces publics Ã  5 minutes",
                [
                    (
                        "Espaces publics Ã  5 minutes",
                        properties["comment"],
                        properties["date"],
                    ),
                ],
            ),
        ]
        administrative_entity_yverdon = models.PermitAdministrativeEntity.objects.get(
            name="Espaces publics yverdonnois Ã  5 minutes",
        )
        administrative_entity_yverdon.tags.set("ep5")

        for works_type, objs in works_types:
            works_type_obj = models.WorksType.objects.create(name=works_type)
            works_type_obj.tags.set(unaccent(works_type))

            for works_obj, *props in objs:
                works_obj_obj, created = models.WorksObject.objects.get_or_create(
                    name=works_obj
                )
                works_object_type = models.WorksObjectType.objects.create(
                    works_type=works_type_obj,
                    works_object=works_obj_obj,
                    is_public=True,
                    notify_services=True,
                    services_to_notify=f"yverdon-squad+admin@liip.ch",
                )
                works_object_type.administrative_entities.add(
                    administrative_entity_yverdon
                )
                for prop in props:
                    prop.works_object_types.add(works_object_type)

        # Configure specific WOT in order to illustrate full potential of Geocity

        # No geom nor time
        for wot in models.WorksObjectType.objects.filter(
            works_type__name="Espaces publics Ã  5 minutes"
        ):
            wot.has_geometry_point = True
            wot.has_geometry_line = False
            wot.has_geometry_polygon = False
            wot.needs_date = False
            wot.save()

    def create_geom_layer_entity(self):

        models.GeomLayer.objects.create(
            layer_name="Parcelle",
            description="DÃ©mo parcelle",
            source_id="1234",
            source_subid="9876",
            external_link="https://www.osm.org",
            geom="SRID=2056;MultiPolygon(((2526831.16912443 1159820.00193672, 2516148.68477727 1198947.70623155, 2551053.08130695 1201183.5750484, 2560741.84617995 1166651.82332153, 2526831.16912443 1159820.00193672)))",
        )

        models.GeomLayer.objects.create(
            layer_name="ArchÃ©ologie",
            description="DÃ©mo archÃ©ologie",
            source_id="1234",
            source_subid="9876",
            external_link="https://www.osm.org",
            geom="SRID=2056;MultiPolygon(((2526831.16912443 1159820.00193672, 2516148.68477727 1198947.70623155, 2551053.08130695 1201183.5750484, 2560741.84617995 1166651.82332153, 2526831.16912443 1159820.00193672)))",
        )

    def create_template_customization(self):
        models.TemplateCustomization.objects.create(
            templatename="geocity",
            application_title="Geocity",
            application_subtitle="Demandes en lignes concenrnant le territoire communal",
            application_description="Demandes en ligne concernant le <b>domaine public</b>",
        )

        models.TemplateCustomization.objects.create(
            templatename="city",
            application_title="City Admin",
            application_subtitle="Demandes en lignes",
            application_description="Demandes concernant l' <i>administration</i>",
        )

    def setup_homepage(self):
        config.APPLICATION_TITLE = "Participation citoyenne"
        config.APPLICATION_SUBTITLE = "Yverdon-les-Bains"
        config.APPLICATION_DESCRIPTION = """<p><b>Essayez l'application Ã  l'aide des diffÃ©rents comptes et rÃ´les (utilisateur / mot de passe):</b></p>
        <p>Utilisateur standard: user / demo</p>
        <p>Pilote (secrÃ©atariat): pilot / demo</p>
        <p>Validateur: validator / demo</p>
        <p>IntÃ©grateur 2: integrator / demo</p>
        <p>Utilisateur: admin / demo</p>
        <p>Utilisateur anonyme: consulter le lien dans l'admin</p>
        <p>Consultez les emails gÃ©nÃ©rÃ©s par l'application:</p>
        => <a href="https://mailhog.geocity.ch" target="_blank">BoÃ®te mail de demo<a/>
        """

    def setup_global_config(self):
        # TODO: adapt texts for surveys
        # "PROPERTIES_STEP": ("Renseignez les caractÃ©ristiques des objets", "", str),
        # "GEO_TIME_STEP": ("Renseignez le planning et la localisation", "", str),
        # "TIME_STEP": ("Renseignez le planning", "", str),
        # "GEO_STEP": ("Renseignez la localisation", "", str),
        # "APPENDICES_STEP": ("Ajouter des documents", "", str),
        # "ACTORS_STEP": ("Renseignez les contacts", "", str),
        # "SUBMIT_STEP": ("RÃ©sumÃ© et envoi", "", str),
        config.ENABLE_GEOCALENDAR = False
        config.LOCATION_STEP = "SÃ©lectionnez la dÃ©marche / le sondage"
        config.PROPERTIES_STEP = "Renseignez les informations"
        config.GEO_STEP = "Choisissez les espaces que vous utilisez le plus frÃ©quemment"

        return
