# Generated by Django 2.1.2 on 2018-11-23 08:29

from django.conf import settings
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, null=True, verbose_name='name')),
                ('firstname', models.CharField(max_length=100, null=True, verbose_name='firstname')),
                ('company_name', models.CharField(max_length=100, null=True, verbose_name='company_name')),
                ('address', models.CharField(max_length=100, null=True, verbose_name='address')),
                ('zipcode', models.PositiveIntegerField(null=True, verbose_name='zipcode')),
                ('city', models.CharField(max_length=100, null=True, verbose_name='city')),
                ('phone_fixed', models.CharField(max_length=20, null=True, verbose_name='phone_fixed')),
                ('phone_mobile', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone_mobile')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='email')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'actor',
            },
        ),
        migrations.CreateModel(
            name='Archelogy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fiche', models.TextField(null=True, verbose_name='fiche')),
                ('commune', models.TextField(null=True, verbose_name='commune')),
                ('descriptio', models.TextField(null=True, verbose_name='descriptio')),
                ('note_carto', models.TextField(null=True, verbose_name='note_carto')),
                ('annee_revi', models.TextField(null=True, verbose_name='annee_revi')),
                ('id_per', models.TextField(null=True, verbose_name='id_per')),
                ('lien_img', models.TextField(null=True, verbose_name='lien_img')),
                ('note_detai', models.TextField(null=True, verbose_name='note_detai')),
                ('shape_len', models.TextField(null=True, verbose_name='shape_len')),
                ('date_maj', models.TextField(null=True, verbose_name='date_maj')),
                ('guid', models.TextField(null=True, verbose_name='guid')),
                ('mention', models.TextField(null=True, verbose_name='mention')),
                ('fme_feat', models.TextField(null=True, verbose_name='fme_feat')),
                ('autre_ment', models.TextField(null=True, verbose_name='autre_ment')),
                ('multi_read', models.TextField(null=True, verbose_name='multi_read')),
                ('autre_mesu', models.TextField(null=True, verbose_name='autre_mesu')),
                ('shape_area', models.TextField(null=True, verbose_name='shape_area')),
                ('objectid', models.TextField(null=True, verbose_name='objectid')),
                ('date_mesur', models.TextField(null=True, verbose_name='date_mesur')),
                ('eca', models.TextField(null=True, verbose_name='eca')),
                ('url_recens', models.TextField(null=True, verbose_name='url_recens')),
                ('mesure', models.TextField(null=True, verbose_name='mesure')),
                ('import_date', models.PositiveIntegerField(null=True, verbose_name='import_date')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(srid=2056, verbose_name='geom')),
            ],
            options={
                'verbose_name': 'archelogy',
            },
        ),
        migrations.CreateModel(
            name='CreditorType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='creditor_name')),
            ],
            options={
                'verbose_name': 'creditortype',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_content', models.TextField(verbose_name='email_content')),
                ('is_validator', models.BooleanField(verbose_name='is_validator')),
                ('is_admin', models.BooleanField(verbose_name='is_admin')),
                ('is_archeologist', models.BooleanField(verbose_name='is_archeologist')),
                ('group', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='auth.Group')),
            ],
            options={
                'verbose_name': 'department',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_path', models.CharField(max_length=1024, verbose_name='file_path')),
                ('file_name', models.CharField(max_length=512, null=True, verbose_name='file_name')),
            ],
            options={
                'verbose_name': 'document',
            },
        ),
        migrations.CreateModel(
            name='PermitRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.PositiveIntegerField(null=True, verbose_name='amount')),
                ('paid', models.BooleanField(default=False, verbose_name='payed')),
                ('validated', models.BooleanField(default=False, verbose_name='is_valid')),
                ('sent', models.BooleanField(default=False, verbose_name='sent')),
                ('ended', models.BooleanField(default=False, verbose_name='ended')),
                ('date_start', models.DateField(verbose_name='date_start')),
                ('date_end', models.DateField(verbose_name='date_end')),
                ('date_effective_end', models.DateField(null=True, verbose_name='date_effective_end')),
                ('length', models.PositiveIntegerField(verbose_name='length')),
                ('width', models.PositiveIntegerField(verbose_name='with')),
                ('road_marking_damaged', models.BooleanField(verbose_name='road_marking_damaged')),
                ('is_green_area', models.BooleanField(verbose_name='is_green_area')),
                ('description', models.TextField(verbose_name='description')),
                ('has_archeology', models.BooleanField(default=False, verbose_name='has_archeology')),
                # ('archeotype', models.BooleanField(default=False, verbose_name='archeotype')),
                ('address', models.CharField(max_length=100, null=True, verbose_name='address_permit')),
                ('date_end_work', models.DateField(null=True, verbose_name='date_end_work')),
                ('date_end_work_announcement', models.DateField(null=True, verbose_name='date_end_work_announcement')),
                ('geom', django.contrib.gis.db.models.fields.MultiPointField(srid=2056, verbose_name='geom')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permitrequest_company', to='gpf.Actor', verbose_name='company')),
                ('invoice_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='gpf.CreditorType', verbose_name='invoice_to')),
                ('project_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permitrequest_project_owner', to='gpf.Actor', verbose_name='project_owner')),
            ],
            options={
                'verbose_name': 'permitrequest',
                'permissions': (('change_amount', 'Can change amount'), ('change_paid', 'Can change paid'), ('change_validated', 'Can change validated'), ('change_sent', 'Can change sent'), ('change_ended', 'Can change ended'), ('change_date_effective_end', 'Can change date_effective_end'), ('change_archeotype', 'Can change archeotype')),
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100, verbose_name='description')),
            ],
            options={
                'verbose_name': 'sitetype',
            },
        ),
        migrations.CreateModel(
            name='Validation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accepted', models.BooleanField(verbose_name='accepted')),
                ('comment', models.TextField(null=True, verbose_name='comment')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gpf.Department')),
                ('permitrequest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gpf.PermitRequest')),
            ],
            options={
                'verbose_name': 'validation',
            },
        ),
        migrations.AddField(
            model_name='permitrequest',
            name='sitetype',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='gpf.SiteType', verbose_name='sitetype'),
        ),
        migrations.AddField(
            model_name='document',
            name='permitrequest',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gpf.PermitRequest'),
        ),
    ]
